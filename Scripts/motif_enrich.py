#!/usr/bin/python
# Time-stamp: <2008-10-01 15:25:12 Tao Liu>

"""Module Description

Copyright (c) 2007 Tao Liu <taoliu@jimmy.harvard.edu>

This code is free software; you can redistribute it and/or modify it
under the terms of the BSD License (see the file COPYING included with
the distribution).

@status:  experimental
@version: $Revision$
@author:  Tao Liu
@contact: taoliu@jimmy.harvard.edu
"""

# ------------------------------------
# python modules
# ------------------------------------

import os
import sys
import logging
from optparse import OptionParser
from glob import glob
import Cistrome
from Cistrome.CoreLib.Parser.MotifScan import read_motif2
from Cistrome.CoreLib.Parser.BedIO import parse_BED
from Cistrome.CoreLib.BasicStat import Prob
import time

# ------------------------------------
# constants
# ------------------------------------
GENOME_SIZE = {"mm8":2644077689L,
               "hg18":3080419480L}

logging.basicConfig(level=20,
                    format='%(levelname)-5s @ %(asctime)s: %(message)s ',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    stream=sys.stderr,
                    filemode="w"
                    )

# ------------------------------------
# Misc functions
# ------------------------------------
error   = logging.critical		# function alias
warn    = logging.warning
debug   = logging.debug
info    = logging.info

def log( msg ):
    sys.stderr.write( msg )

def fact (n):
    return reduce(lambda a,b:a*(b+1),range(n),1)
# ------------------------------------
# Classes
# ------------------------------------

# ------------------------------------
# Main function
# ------------------------------------
def main():
    usage = "usage: %prog [options]"
    description = "Calculate the motif enrichment measured in foldchange and p-value for one BED file and one reference BED file"
    
    optparser = OptionParser(version="%prog 0.1",description=description,usage=usage,add_help_option=False)
    optparser.add_option("-h","--help",action="help",help="Show this help message and exit.")
    optparser.add_option("-s","--species",dest="species",type="string",
                         help="species, must be \"mm8\" or \"hg18\"")    
    optparser.add_option("-i","--ifile",dest="ifile",type="string",
                         help="input BED file, e.g. the ChIP regions")
    optparser.add_option("-r","--rfile",dest="rfile",type="string",
                         help="input reference BED file, e.g. the tiled regions. [optional] if not set, use the whole genome as reference")
    optparser.add_option("-c","--cutoff",dest="cutoff",type="int",default=0,
                         help="cutoff for the motif scan score")
    optparser.add_option("-d","--idir",dest="idir",type="string",
                         help="input directory for binary Motif Scan Results files")
    optparser.add_option("-a","--all",dest="showall",action="store_true",
                         help="If set, also show the depleted motifs. Default, not show")
    optparser.add_option("--minfc",dest="minfc",type="float",default=0,
                         help="minimum foldchange for motif enrichment, default:0")
    optparser.add_option("--maxp",dest="maxp",type="float",default=1,
                         help="maximum p-value for motif enrichment, default:1")
    optparser.add_option("--minpercent",dest="minpercent",type="int",default=5,
                         help="minimum percentage of input BED regions containing motif, default:5")
    optparser.add_option("--maxpercent",dest="maxpercent",type="int",default=300,
                         help="maximum percentage of input BED regions containing motif, default:300")
    optparser.add_option("--verbose",dest="verbose",type="string",
                         help="Name of a directory. if set, save verbose information in the direcotry.", default=None)
    optparser.add_option("-o","--ofile",dest="ofile",
                         help="output file") 
    (options,args) = optparser.parse_args()

    if not options.ifile or not options.idir or not options.ofile:
        optparser.print_help()
        sys.exit(1)

    if options.species != "mm8" and options.species != "hg18":
        error ("Species must be \"mm8\" for mouse or \"hg18\" for human!")
        sys.exit(1)

    if options.verbose:
        if os.path.exists(options.verbose):
            warn ("Path exists!: %s" % (options.verbose))
            #sys.exit(1)
        else:
            os.mkdir(options.verbose)

    ofhd = file(options.ofile,"w")
    ofhd.write("""#Motif Enrichment Report:
# Generated by %s
# Species: %s
# Motif cutoff: %d
# Input BED: %s
""" % (time.asctime(),options.species,options.cutoff,options.ifile))
    if options.rfile:
        ofhd.write("# Reference: %s\n" % (options.rfile))
    else:
        ofhd.write("# Reference: Whole Genome Background\n")
    if not options.showall:
        ofhd.write("""# Minimum foldchange: %.2f
# Maximum p-value: %.5e
# Minimum percentage of coverage: %d%%
# Maximum percentage of coverage: %d%%
""" % (options.minfc,options.maxp,options.minpercent,options.maxpercent))

    ofhd.write("#\n# motif\tnum_detected\tnum_in_reference_region\tpercent\tfc\tpvalue\n")

    info("#1. Read BED file: %s" % (options.ifile))
    track = parse_BED(file(options.ifile,'r'))
    track.sort()
    track.merge_overlap()
    track_len = track.length()

    if options.rfile:
        info("#2. Read reference BED file: %s" % (options.rfile))
        # add tags
        refer_track = parse_BED(file(options.rfile,'r'))
        refer_track.sort()
        refer_track.merge_overlap()
        refer_len = refer_track.length()
        whole_genome = False
    else:
        info("#2. Use whole genome as reference!")
        refer_len = GENOME_SIZE[options.species]
        whole_genome = True


#     ofhd.write("""# Length of Input BED: %d
# # Length of Reference: %d
# """ % (track_len,refer_len))

    info("#3. Read Motif files in %s" % (options.idir))
    mfiles = glob(options.idir+"/*.dat")
    info(" * Altogether %d motif to be processed." %(len(mfiles)))
    for mf in mfiles:
        mbase = os.path.basename(mf)
        info(" motif: read %s..." % (mbase))
        if options.verbose:
            vfhd = open(options.verbose+"/"+mbase+".txt","w")
        mfhd = open(mf,"r")
        mtrack = read_motif2(mfhd,options.species,options.cutoff) # a FWTrackI object
        mtrack.fw=5
        info(" calculating...")
        (num,v) = track.overlap_with_FWTrackI(mtrack,verbose=True)
        percent = float(len(v))/track.total()*100
        if options.verbose:
            for eachline in v:
                vfhd.write(eachline+"\n")
            v=None
            vfhd.close()

        if whole_genome:
            refer_num = mtrack.total
        else:
            refer_num = refer_track.overlap_with_FWTrackI(mtrack,verbose=False)
        if refer_num == 0:
            pvalue = "NA"
            fc = "NA"
        else:
            lam = float(track_len)*refer_num/refer_len
            fc = "%.4f" % (float(num)/refer_num*refer_len/track_len) # foldchange
            if lam == 0:
                pvalue = "NA"
            elif num == 0:
                pvalue = "NA"
            else:
                pvalue = Prob.poisson_cdf(num,lam,lower=False)
                pvalue = "%.3e" % (pvalue)
        info("%s\t%d\t%d\t%.2f\t%s\t%s" % (mbase.rstrip(".dat"),num,refer_num,percent,fc,pvalue))
        if not options.showall:
            if (fc == "NA" or float(fc) < options.minfc or (pvalue != "NA" and float(pvalue) > options.maxp) or float(num)/track.total() < 0.05 or percent < options.minpercent or percent > options.maxpercent):
                info( " skipped")
                continue
        ofhd.write("%s\t%d\t%d\t%.2f\t%s\t%s\n" % (mbase.rstrip(".dat"),num,refer_num,percent,fc,pvalue))
        mtrack = None
        mfhd.close()
    ofhd.close()
    info("Over!")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        warn("User interrupt me! ;-) See you!")
        sys.exit(0)
